########### pauqetes ###########
#remove.packages("promises")
#install.packages("promises")
#install.packages("devtools")
library(usethis)
library(devtools)
#devtools::install_github("DevonDeRaad/SNPfiltR")
#devtools::install_github(repo="knausb/vcfR")
#install_github("jdstorey/qvalue")
library("qvalue")
#devtools::install_github("whitlock/OutFLANK")
#library(OutFLANK)
library(SNPfiltR)
library(vcfR)
library(adegenet)
#devtools::install_github("TheWangLab/algatr")
library(algatr)
#nstall.packages("factoextra")
#library(ggplot2)
#library(factoextra)
#devtools::install_github("spflanagan/fsthet_analysis/fsthet")
library(fsthet)
#install.packages("here")
#install_github("zhengxwen/SNPRelate")
#install_github("zhengxwen/SeqArray")
#library(gdsfmt)
#library(SNPRelate)
#library(SeqArray)


################ paso inicial ##################
# primero debemos tener nuestros datos feneticos, los cuales estan en la carpeta salida_cluster,
# es necesario separar los datos del bosque y de las camaras asi que use el la siguiente linea 
# en la terminal: 
#  vcftools --vcf populations.snps.vcf --keep muestras_bosque.txt --recode --recode-INFO-all --out PNDL 

setwd("F:/pasos_en_R/filtros_post_ensamble/")

vcfR <- read.vcfR("PNDL.recode.vcf")
vcfR

################### eliminar sesgo placa ###################
# nosotros tenemos un sesgo dado por las placas, asi que antes de aplicar mas filtros es necesario
# eliminar los SNPs que nos generen el efecto de las placas (OÂ´Leary at al., 2018)
# primero debemos crear un popmap donde el numero de la placa sea la "poblacion" para despues realizar un test de outlayers,
# una vez identificados los snps atipicos estos se eliminaran   

pop_placa <- read.csv("popmap_placa.csv", header = T)
popmap <- read.csv("popmap_omar.csv", header = T)
ind_placas <- pop_placa[pop_placa$id %in% popmap$id, ]
ind_placas

# convetimosa objeto genlight
placa_genl <- vcfR2genlight(vcfR)
placa_genl
# asignamos las poblaciones artificiales
pop(placa_genl) <- ind_placas$placa

# Realizamos un DAPC para ver el efecto de la placa 
pramx<-xvalDapc(tab(placa_genl,NA.method="mean"), pop(placa_genl))
colores <- c("#abd9e9","#313695","#ffd700","#9e0852")
plotdapc <- scatter(pramx$DAPC, mstree = T, clabel = T, lwd = 2, grid=T, cex=3,
                    col = colores, cleg = 0.80, posi.da = "bottomleft" )

# creamos una matriz con formato similar a genepop
geno <- extract.gt(vcfR) # Character matrix containing the genotypes
geno <- t(geno)
G <- matrix(geno, nrow = nrow(geno), ncol = ncol(geno))

G[geno %in% c("0/0", "0|0", NA)] <- "0101"
G[geno  %in% c("0/1", "0|1")] <- "0102"
G[geno  %in% c("1/0", "1|0")] <- "0201"
G[geno %in% c("1/1", "1|1")] <- "0202"

G <- G[-188, ] # eliminamos la muestra PP2 por la cantidad de NAs que presenta 

colnames(G) <- vcfR@fix[,3]
pop_nuevo_genpop <- ind_placas[-53, ]
pop.info <- pop_nuevo_genpop$placa
ind.names <- pop_nuevo_genpop$id
G <- cbind(pop.info, ind.names, G)

# calculamos los Fst y Ht para los loci (Flanagan & Jones, (2017)
fsts<-calc.actual.fst(G,"fst")
head(fsts)

par(mar=c(4,4,1,1))
plot(fsts$Ht, fsts$Fst,xlab="Ht",ylab="Fst",pch=19)

# estimamos los outlayers y los guardamos para eliminarlos 
quant.out<-fst.boot(G, bootstrap = FALSE)
outliers<-find.outliers(fsts,boot.out=quant.out)
snps_eliminar <- as.vector(outliers$Locus)
write.csv(snps_eliminar, "outliers_efecto_placa.csv")
head(outliers)
out.dat<-fsthet(G)

# eliminamos los outlayers y realizamos dapc 
# vcftools --vcf PNDL.recode.vcf --exclude-snps outliers_efecto_placa.txt --recode --recode-INFO-all --out abies_religiosa
vcfR <- read.vcfR("abies_religiosa.recode.vcf")
vcfR
# convetimosa objeto genlight
placa_genl <- vcfR2genlight(vcfR)
placa_genl
# asignamos las poblaciones artificiales
pop(placa_genl) <- ind_placas$placa

# Realizamos un DAPC para ver el efecto de la placa 
pramx<-xvalDapc(tab(placa_genl,NA.method="mean"), pop(placa_genl))
colores <- c("#abd9e9","#313695","#ffd700","#9e0852")
plotdapc <- scatter(pramx$DAPC, mstree = T, clabel = T, lwd = 2, grid=T, cex=3,
                    col = colores, cleg = 0.80, posi.da = "bottomleft" )


########################## filtros con SNPfiltR ######################

vcfR <- read.vcfR("abies_religiosa.recode.vcf")
vcfR

# este paso genera graficas con los datos no filtrados
# la linea roja significa la media de ...
hard_filter(vcfR=vcfR)

# ahora eliminamos los loci con una profundidad menor a 10 y una calida menor a 35
vcfR<-hard_filter(vcfR=vcfR, depth = 10, gq = 35)
hard_filter(vcfR=vcfR)

# ahora aplicamos un filtro del balance de alelos
vcfR<-filter_allele_balance(vcfR)

# hacemos una exploracion de la profundidad maxima, es necesario elimanar estos SNPs porque pueden ser paralogos 
max_depth(vcfR)
vcfR<-max_depth(vcfR, maxdepth = 50)
vcfR

# ahora vemos el missing data de los idividuos
popmap <- read.csv("popmap_omar.csv", header = T)
missing_by_sample(vcfR=vcfR, popmap = popmap)
# eliminamos individuos con missing data mayor al 80%
vcfR<-missing_by_sample(vcfR=vcfR, cutoff = .8)

#subset popmap to only include retained individuals
popmap<-popmap[popmap$id %in% colnames(vcfR@gt),]

#remove invariant sites generated by dropping individuals
vcfR<-min_mac(vcfR, min.mac = 1)
vcfR

# antes de aplicar el filtro de missing data en los loci haces un diagnostico con diferentes 
# umbrales para permitir missing data. Al parecer mientras mas alto es el umbral mas es la separacion
# entre los individuos, asi que nos quedaremos con el umbral de 0.09
miss<-assess_missing_data_pca(vcfR=vcfR, popmap = popmap, thresholds = c(.7,.8,.85,.9), clustering = FALSE)
vcfR_miss0.7<-missing_by_snp(vcfR, cutoff = .7)
vcfR_miss0.85<-missing_by_snp(vcfR, cutoff = .85)


# ahora vamos a hacer un diagnostico con diferentes valores de mac
vcfR_miss0.7 <- min_mac(vcfR_miss0.7, min.mac = 2)
vcfR_miss0.85 <- min_mac(vcfR_miss0.85, min.mac = 2)
miss<-assess_missing_data_tsne(vcfR_miss0.7, popmap, clustering = FALSE)
miss<-assess_missing_data_tsne(vcfR_miss0.85, popmap, clustering = FALSE)

# finalmente eliminamos SNPs ligados en ventanas de 100pb, abies tiene una recombinacion 
# de 1000pb?
vcfR_miss0.7 <- distance_thin(vcfR = vcfR_miss0.7, min.distance = 100)
vcfR_miss0.7
vcfR::write.vcf(vcfR_miss0.7, "vcfR_miss0.7.vcf")

vcfR_miss0.85 <- distance_thin(vcfR = vcfR_miss0.85, min.distance = 100)
vcfR_miss0.85
vcfR::write.vcf(vcfR_miss0.85, "vcfR_miss0.85.vcf.gz")


