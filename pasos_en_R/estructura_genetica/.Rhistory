# aqui necesite ayuda de chatgpt
posterior$pop_probable <- apply(posterior[,1:4], 1, function(x){
names(posterior)[which.min(abs(x-1))]
} )
# agregamos la categorizacion previa
posterior$pop_previo <- ind_filt$ozone_damage_percentage
# agregamos edad para ver si el cambio de categoria se debe a la edad
# la hipotesis seria que los pequeños aun no muestran signos notorios de daño
posterior$edad <- ind_filt$tree_nodes
View(posterior)
# realizamos el dapc pero con las categorias de daño predichas por el dapc
# en teoria estas tendrian que ser las poblaciones que realmente son
pop(forest) <- posterior$pop_probable # las categorias de daño predichas por el dapc
pop_probable<-xvalDapc(tab(forest,NA.method="mean"), pop(forest))
plotdapc <- scatter(pop_probable$DAPC, mstree = T, clabel = T, lwd = 2, grid=T, cex=3,
cleg = 0.80, posi.da = "bottomleft", col = c("darkgreen","gold2", "chocolate1", "red4")  )
pop_probable<-xvalDapc(tab(forest,NA.method="mean"), pop(forest))
plotdapc <- scatter(pop_probable$DAPC, mstree = T, clabel = T, lwd = 2, grid=T, cex=3,
cleg = 0.80, posi.da = "bottomleft", col = c("darkgreen","gold2", "chocolate1", "red4")  )
# cargamos el vcf y solo nos quedamos con los individuos del bosque y
# solo excluimos a los individuos repetidos
vcfR_paisaje <- gl.read.vcf("GBS_data.recode.vcf")
# usaremos forest para separar a los individuos del bosque ya que son los que tienen una categoria de daño
meta_gbs %>% count(Treatment)
f <- "forest"
bosque_ind <- meta_gbs[meta_gbs$Treatment %in% f, ]
forest <- gl.keep.ind(vcfR_paisaje, bosque_ind$Sample_Name_Plate, recalc = FALSE, mono.rm = FALSE, verbose = 3)
# cargamos el vcf y solo nos quedamos con los individuos del bosque y
# solo excluimos a los individuos repetidos
vcfR_paisaje <- gl.read.vcf("GBS_data.recode.vcf")
# usaremos forest para separar a los individuos del bosque ya que son los que tienen una categoria de daño
meta_gbs %>% count(Treatment)
f <- c("forest", "potential_mother")
bosque_ind <- meta_gbs[meta_gbs$Treatment %in% f, ]
forest <- gl.keep.ind(vcfR_paisaje, bosque_ind$Sample_Name_Plate, recalc = FALSE, mono.rm = FALSE, verbose = 3)
# eliminamos los reforestados y las muestras repetidas (NA en estas cuentas)
bosque_ind %>% count(reforested)
nof <- "no"
bosque_ind <- bosque_ind[bosque_ind$reforested %in% nof, ]
bosque_ind %>% count(reforested)
# volvemos a cortar el vcf
forest <- gl.keep.ind(vcfR_paisaje, bosque_ind$Sample_Name_Plate, recalc = FALSE, mono.rm = FALSE, verbose = 3)
# creamos un archivo genepop como lo quiere fsthet
vcfR_paisaje <- read.vcfR("GBS_data.recode.vcf")
geno <- extract.gt(vcfR_paisaje) # obtenemos una matriz que contiene a los genotipos
geno <- t(geno)
# como es el vcf general solo lo filtramos con los individuos del bosque
geno <- geno[rownames(geno) %in% forest@ind.names, ]
G <- matrix(geno, nrow = nrow(geno), ncol = ncol(geno))
# cambiamos el fomato segun el tutorial de fsthet
G[geno %in% c("0/0")] <- "0101"
G[geno  %in% c("0/1")] <- "0102"
G[geno  %in% c("1/0")] <- "0201"
G[geno %in% c("1/1")] <- "0202"
# agregamos el nombre de los loci
colnames(G) <- vcfR_paisaje@fix[,3]
# agregamos el nombre de los individuos y el porcentaje de daño por ozono
pop.info <- posterior$pop_probable
ind.names <- bosque_ind$Sample_Name_Plate
G <- cbind(pop.info, ind.names, G)
# calculamos los Fst y Ht para los loci (Flanagan & Jones, (2017)
fsts<-calc.actual.fst(G,"fst")
head(fsts)
par(mar=c(4,4,1,1))
plot(fsts$Ht, fsts$Fst,xlab="Ht",ylab="Fst",pch=19)
# estimamos los outlayers, creamos un grafico y los guardamos en txt
quant.out<-fst.boot(G, bootstrap = T)
outliers<-find.outliers(fsts,boot.out=quant.out)
snps_outliers <- as.vector(outliers$Locus)
write.table(snps_outliers, "outliers_pop_daño.txt",  sep = "\t", row.names = FALSE, col.names = FALSE, quote = FALSE)
head(outliers)
out.dat<-fsthet(G)
head(out.dat)
forest@ind.names
# esta es una segunda opcion para realizar el pcadapt
G_pcadapt <- extract.gt(vcfR_paisaje) # obtenemos una matriz que contiene a los genotipos
# como es el vcf general solo lo filtramos con los individuos del bosque
G_pcadapt <- G_pcadapt[,colnames(G_pcadapt) %in% forest@ind.names]
# en estsion oun locus, por lo que cero y 2 son homocigos
G_pcadapt[G_pcadapt %in% c("0/0")] <- "0"
G_pcadapt[G_pcadapt  %in% c("1/0", "0/1")] <- "1"
G_pcadapt[G_pcadapt %in% c("1/1")] <- "2"
filename2 <- read.pcadapt(G_pcadapt , type = "pcadapt")
x2 <- pcadapt(filename2, K=50)
plot(x2, option = "screeplot")
plot(x2, option = "scores")
plot(x2, option = "scores", i = 3, j = 4)
# usaremos el metodo de q y fdr
qval2 <- qvalue(x2$pvalues)$qvalues
alpha <- 0.1
outpcadapt_v2 <- which(qval2 < alpha)
outpcadapt_v2 # estas son las filas donde debe estar el outlier en geno_matrix
outliers <- G_pcadapt[outpcadapt_v2, ]
rownames(outliers) # este es el bueno
rownames(outliers_v1)
pcadap_outlier <- rownames(outliers)
pcadap_outlier
write.table(pcadap_outlier, "pcadap_outlier.txt", sep = "\t", row.names = FALSE, col.names = FALSE, quote = FALSE)
# esta seria la lista final de outliers, solo tivimos outliers con
# pcadapt y fsthet
pcadap_outlier
snps_outliers
# Encontrar los elementos que están en ambas listas
duplicados <- intersect(pcadap_outlier, snps_outliers)
# Mostrar los duplicados, esto nos dice que las señales son correctas?
print(duplicados)
# Eliminar los duplicados de la lista `pcadap_outlier`
pcadap_outlier <- setdiff(pcadap_outlier, duplicados)
# Unir las dos listas sin duplicados
outliers_combinados <- union(pcadap_outlier, snps_outliers)
# los guardamos para despues eliminarnos del vcf GBS_data, para asi tener nuestro set de loci potencialmente neutrales
write.table(outliers_combinados, "LOCI_ATIPICOS.txt",  sep = "\t", row.names = FALSE, col.names = FALSE, quote = FALSE)
########## estructura sin outliers #####
# muestras sin outliers
vcf_sin <- gl.read.vcf("set_casi_neutral.recode.vcf")
# volvemos a cortar el vcf
forest_nuetral <- gl.keep.ind(vcf_sin, ind_filt$Sample_Name_Plate, recalc = FALSE, mono.rm = FALSE, verbose = 3)
pop(forest_nuetral) <- posterior$pop_probable # las categorias de daño son nuestra poblacion
# cargamos los datos de las categorias de daño
paj_sin<-xvalDapc(tab(forest_nuetral,NA.method="mean"), pop(forest_nuetral))
plotdapc <- scatter(paj_sin$DAPC, mstree = T, clabel = T, lwd = 2, grid=T, cex=3,
cleg = 0.80, posi.da = "bottomleft", col = c("darkgreen","gold2", "chocolate1", "red4")  )
# cargamos los datos de las categorias de daño
paj_sin<-xvalDapc(tab(forest_nuetral,NA.method="mean"), pop(forest_nuetral))
plotdapc <- scatter(paj_sin$DAPC, mstree = T, clabel = T, lwd = 2, grid=T, cex=3,
cleg = 0.80, posi.da = "bottomleft", col = c("darkgreen","gold2", "chocolate1", "red4")  )
# muestras solo outliers
vcf_con <- gl.read.vcf("set_casi_atipico.recode.vcf")
forest_atipico <- gl.keep.ind(vcf_con , ind_filt$Sample_Name_Plate, recalc = FALSE, mono.rm = FALSE, verbose = 3)
pop(forest_atipico) <- posterior$pop_probable # las categorias de daño son nuestra poblacion
paj_con<-xvalDapc(tab(forest_atipico ,NA.method="mean"), pop(forest_atipico))
plotdapc <- scatter(paj_con$DAPC, mstree = T, clabel = T, lwd = 2, grid=T, cex=3,
cleg = 0.80, posi.da = "bottomleft", col = c("darkgreen","gold2", "chocolate1", "red4")  )
paj_con<-xvalDapc(tab(forest_atipico ,NA.method="mean"), pop(forest_atipico))
plotdapc <- scatter(paj_con$DAPC, mstree = T, clabel = T, lwd = 2, grid=T, cex=3,
cleg = 0.80, posi.da = "bottomleft", col = c("darkgreen","gold2", "chocolate1", "red4")  )
paj_con<-xvalDapc(tab(forest_atipico ,NA.method="mean"), pop(forest_atipico))
plotdapc <- scatter(paj_con$DAPC, mstree = T, clabel = T, lwd = 2, grid=T, cex=3,
cleg = 0.80, posi.da = "bottomleft", col = c("darkgreen","gold2", "chocolate1", "red4")  )
# cargamos los datos de las categorias de daño
paj_sin<-xvalDapc(tab(forest_nuetral,NA.method="mean"), pop(forest_nuetral))
plotdapc <- scatter(paj_sin$DAPC, mstree = T, clabel = T, lwd = 2, grid=T, cex=3,
cleg = 0.80, posi.da = "bottomleft", col = c("darkgreen","gold2", "chocolate1", "red4")  )
########## estructura sin outliers #####
# muestras sin outliers
vcf_sin <- gl.read.vcf("set_casi_neutral.recode.vcf")
# volvemos a cortar el vcf
forest_nuetral <- gl.keep.ind(vcf_sin, ind_filt$Sample_Name_Plate, recalc = FALSE, mono.rm = FALSE, verbose = 3)
pop(forest_nuetral) <- posterior$pop_probable # las categorias de daño son nuestra poblacion
# cargamos los datos de las categorias de daño
paj_sin<-xvalDapc(tab(forest_nuetral,NA.method="mean"), pop(forest_nuetral))
plotdapc <- scatter(paj_sin$DAPC, mstree = T, clabel = T, lwd = 2, grid=T, cex=3,
cleg = 0.80, posi.da = "bottomleft", col = c("darkgreen","gold2", "chocolate1", "red4")  )
# muestras solo outliers
vcf_con <- gl.read.vcf("set_casi_atipico.recode.vcf")
forest_atipico <- gl.keep.ind(vcf_con , ind_filt$Sample_Name_Plate, recalc = FALSE, mono.rm = FALSE, verbose = 3)
pop(forest_atipico) <- posterior$pop_probable # las categorias de daño son nuestra poblacion
paj_con<-xvalDapc(tab(forest_atipico ,NA.method="mean"), pop(forest_atipico))
plotdapc <- scatter(paj_con$DAPC, mstree = T, clabel = T, lwd = 2, grid=T, cex=3,
cleg = 0.80, posi.da = "bottomleft", col = c("darkgreen","gold2", "chocolate1", "red4")  )
# cargamos el vcf y solo nos quedamos con los individuos del bosque y
# solo excluimos a los individuos repetidos
vcfR_paisaje <- gl.read.vcf("GBS_data.recode.vcf")
# usaremos forest para separar a los individuos del bosque ya que son los que tienen una categoria de daño
meta_gbs %>% count(Treatment)
f <- c("forest")
bosque_ind <- meta_gbs[meta_gbs$Treatment %in% f, ]
forest <- gl.keep.ind(vcfR_paisaje, bosque_ind$Sample_Name_Plate, recalc = FALSE, mono.rm = FALSE, verbose = 3)
# eliminamos los reforestados y las muestras repetidas (NA en estas cuentas)
bosque_ind %>% count(reforested)
nof <- "no"
bosque_ind <- bosque_ind[bosque_ind$reforested %in% nof, ]
bosque_ind %>% count(reforested)
# volvemos a cortar el vcf
forest <- gl.keep.ind(vcfR_paisaje, bosque_ind$Sample_Name_Plate, recalc = FALSE, mono.rm = FALSE, verbose = 3)
# creamos un archivo genepop como lo quiere fsthet
vcfR_paisaje <- read.vcfR("GBS_data.recode.vcf")
geno <- extract.gt(vcfR_paisaje) # obtenemos una matriz que contiene a los genotipos
geno <- t(geno)
# como es el vcf general solo lo filtramos con los individuos del bosque
geno <- geno[rownames(geno) %in% forest@ind.names, ]
G <- matrix(geno, nrow = nrow(geno), ncol = ncol(geno))
# cambiamos el fomato segun el tutorial de fsthet
G[geno %in% c("0/0")] <- "0101"
G[geno  %in% c("0/1")] <- "0102"
G[geno  %in% c("1/0")] <- "0201"
G[geno %in% c("1/1")] <- "0202"
# agregamos el nombre de los loci
colnames(G) <- vcfR_paisaje@fix[,3]
# agregamos el nombre de los individuos y el porcentaje de daño por ozono
pop.info <- posterior$pop_probable
ind.names <- bosque_ind$Sample_Name_Plate
G <- cbind(pop.info, ind.names, G)
########## dapc categorias de saño #####
# cargamos el vcf con los snps neutrales
vcfR_daño <- gl.read.vcf("GBS_data.recode.vcf")
# usaremos forest para separar a los individuos del bosque ya que son los que tienen una categoria de daño
meta_gbs <- read.csv("df_GBS_metadata.csv")
meta_gbs %>% count(Treatment)
f <- c("forest")
bosque_ind <- meta_gbs[meta_gbs$Treatment %in% f, ]
forest <- gl.keep.ind(vcfR_daño, bosque_ind$Sample_Name_Plate, recalc = FALSE, mono.rm = FALSE, verbose = 3)
# asiganamos las categorias de daño a los individuos del bosque
bosque_ind$ozone_damage_percentage[is.na(bosque_ind$ozone_damage_percentage)] <- "0%"
bosque_ind$ozone_damage_percentage[bosque_ind$ozone_damage_percentage  %in% c("less than 10%")] <- "10%"
bosque_ind$ozone_damage_percentage[bosque_ind$ozone_damage_percentage  %in% c("10 to 40%")] <- "10_40%"
bosque_ind$ozone_damage_percentage[bosque_ind$ozone_damage_percentage  %in% c("40 to 50%", "50 to 70%", "more than 70%")] <- "40_70%"
bosque_ind %>% count(ozone_damage_percentage) # las categorias a usar
# eliminamos los reforestados y las muestras repetidas (NA en estas cuentas)
bosque_ind %>% count(reforested)
nof <- "no"
ind_filt <- bosque_ind[bosque_ind$reforested %in% nof, ]
ind_filt %>% count(reforested)
# volvemos a cortar el vcf
forest <- gl.keep.ind(vcfR_daño, ind_filt$Sample_Name_Plate, recalc = FALSE, mono.rm = FALSE, verbose = 3)
pop(forest) <- ind_filt$ozone_damage_percentage # las categorias de daño son nuestra poblacion
paj_daño<-xvalDapc(tab(forest,NA.method="mean"), pop(forest))
plotdapc <- scatter(paj_daño$DAPC, mstree = T, clabel = T, lwd = 2, grid=T, cex=3,
cleg = 0.80, posi.da = "bottomleft", col = c("darkgreen","gold2", "chocolate1", "red4")  )
posterior <- as.data.frame(paj_daño$DAPC$posterior)
# optenemos la categoria de daño mas probable segun el dapc
# aqui necesite ayuda de chatgpt
posterior$pop_probable <- apply(posterior[,1:4], 1, function(x){
names(posterior)[which.min(abs(x-1))]
} )
# agregamos la categorizacion previa
posterior$pop_previo <- ind_filt$ozone_damage_percentage
# agregamos edad para ver si el cambio de categoria se debe a la edad
# la hipotesis seria que los pequeños aun no muestran signos notorios de daño
posterior$edad <- ind_filt$tree_nodes
# realizamos el dapc pero con las categorias de daño predichas por el dapc
# en teoria estas tendrian que ser las poblaciones que realmente son
pop(forest) <- posterior$pop_probable # las categorias de daño predichas por el dapc
pop_probable<-xvalDapc(tab(forest,NA.method="mean"), pop(forest))
plotdapc <- scatter(pop_probable$DAPC, mstree = T, clabel = T, lwd = 2, grid=T, cex=3,
cleg = 0.80, posi.da = "bottomleft", col = c("darkgreen","gold2", "chocolate1", "red4")  )
# cargamos el vcf y solo nos quedamos con los individuos del bosque y
# solo excluimos a los individuos repetidos
vcfR_paisaje <- gl.read.vcf("GBS_data.recode.vcf")
# usaremos forest para separar a los individuos del bosque ya que son los que tienen una categoria de daño
meta_gbs %>% count(Treatment)
f <- c("forest")
bosque_ind <- meta_gbs[meta_gbs$Treatment %in% f, ]
forest <- gl.keep.ind(vcfR_paisaje, bosque_ind$Sample_Name_Plate, recalc = FALSE, mono.rm = FALSE, verbose = 3)
# eliminamos los reforestados y las muestras repetidas (NA en estas cuentas)
bosque_ind %>% count(reforested)
nof <- "no"
bosque_ind <- bosque_ind[bosque_ind$reforested %in% nof, ]
bosque_ind %>% count(reforested)
# volvemos a cortar el vcf
forest <- gl.keep.ind(vcfR_paisaje, bosque_ind$Sample_Name_Plate, recalc = FALSE, mono.rm = FALSE, verbose = 3)
# creamos un archivo genepop como lo quiere fsthet
vcfR_paisaje <- read.vcfR("GBS_data.recode.vcf")
geno <- extract.gt(vcfR_paisaje) # obtenemos una matriz que contiene a los genotipos
geno <- t(geno)
# como es el vcf general solo lo filtramos con los individuos del bosque
geno <- geno[rownames(geno) %in% forest@ind.names, ]
G <- matrix(geno, nrow = nrow(geno), ncol = ncol(geno))
# cambiamos el fomato segun el tutorial de fsthet
G[geno %in% c("0/0")] <- "0101"
G[geno  %in% c("0/1")] <- "0102"
G[geno  %in% c("1/0")] <- "0201"
G[geno %in% c("1/1")] <- "0202"
# agregamos el nombre de los loci
colnames(G) <- vcfR_paisaje@fix[,3]
# agregamos el nombre de los individuos y el porcentaje de daño por ozono
pop.info <- posterior$pop_probable
ind.names <- bosque_ind$Sample_Name_Plate
G <- cbind(pop.info, ind.names, G)
# calculamos los Fst y Ht para los loci (Flanagan & Jones, (2017)
fsts<-calc.actual.fst(G,"fst")
head(fsts)
par(mar=c(4,4,1,1))
plot(fsts$Ht, fsts$Fst,xlab="Ht",ylab="Fst",pch=19)
# estimamos los outlayers, creamos un grafico y los guardamos en txt
quant.out<-fst.boot(G, bootstrap = T)
outliers<-find.outliers(fsts,boot.out=quant.out)
snps_outliers <- as.vector(outliers$Locus)
write.table(snps_outliers, "outliers_pop_daño.txt",  sep = "\t", row.names = FALSE, col.names = FALSE, quote = FALSE)
head(outliers)
out.dat<-fsthet(G)
head(out.dat)
# esta es una segunda opcion para realizar el pcadapt
G_pcadapt <- extract.gt(vcfR_paisaje) # obtenemos una matriz que contiene a los genotipos
# como es el vcf general solo lo filtramos con los individuos del bosque
G_pcadapt <- G_pcadapt[,colnames(G_pcadapt) %in% forest@ind.names]
# en estsion oun locus, por lo que cero y 2 son homocigos
G_pcadapt[G_pcadapt %in% c("0/0")] <- "0"
G_pcadapt[G_pcadapt  %in% c("1/0", "0/1")] <- "1"
G_pcadapt[G_pcadapt %in% c("1/1")] <- "2"
filename2 <- read.pcadapt(G_pcadapt , type = "pcadapt")
x2 <- pcadapt(filename2, K=50)
plot(x2, option = "screeplot")
plot(x2, option = "scores")
plot(x2, option = "scores", i = 3, j = 4)
# usaremos el metodo de q y fdr
qval2 <- qvalue(x2$pvalues)$qvalues
alpha <- 0.1
outpcadapt_v2 <- which(qval2 < alpha)
outpcadapt_v2 # estas son las filas donde debe estar el outlier en geno_matrix
outliers <- G_pcadapt[outpcadapt_v2, ]
rownames(outliers) # este es el bueno
rownames(outliers_v1)
pcadap_outlier <- rownames(outliers)
pcadap_outlier
write.table(pcadap_outlier, "pcadap_outlier.txt", sep = "\t", row.names = FALSE, col.names = FALSE, quote = FALSE)
# esta seria la lista final de outliers, solo tivimos outliers con
# pcadapt y fsthet
pcadap_outlier
snps_outliers
# Encontrar los elementos que están en ambas listas
duplicados <- intersect(pcadap_outlier, snps_outliers)
# Mostrar los duplicados, esto nos dice que las señales son correctas?
print(duplicados)
# Eliminar los duplicados de la lista `pcadap_outlier`
pcadap_outlier <- setdiff(pcadap_outlier, duplicados)
# Unir las dos listas sin duplicados
outliers_combinados <- union(pcadap_outlier, snps_outliers)
# los guardamos para despues eliminarnos del vcf GBS_data, para asi tener nuestro set de loci potencialmente neutrales
write.table(outliers_combinados, "LOCI_ATIPICOS.txt",  sep = "\t", row.names = FALSE, col.names = FALSE, quote = FALSE)
########## estructura sin outliers #####
# muestras sin outliers
vcf_sin <- gl.read.vcf("set_casi_neutral.recode.vcf")
# volvemos a cortar el vcf
forest_nuetral <- gl.keep.ind(vcf_sin, ind_filt$Sample_Name_Plate, recalc = FALSE, mono.rm = FALSE, verbose = 3)
pop(forest_nuetral) <- posterior$pop_probable # las categorias de daño son nuestra poblacion
# cargamos los datos de las categorias de daño
paj_sin<-xvalDapc(tab(forest_nuetral,NA.method="mean"), pop(forest_nuetral))
plotdapc <- scatter(paj_sin$DAPC, mstree = T, clabel = T, lwd = 2, grid=T, cex=3,
cleg = 0.80, posi.da = "bottomleft", col = c("darkgreen","gold2", "chocolate1", "red4")  )
# cargamos los datos de las categorias de daño
paj_sin<-xvalDapc(tab(forest_nuetral,NA.method="mean"), pop(forest_nuetral))
plotdapc <- scatter(paj_sin$DAPC, mstree = T, clabel = T, lwd = 2, grid=T, cex=3,
cleg = 0.80, posi.da = "bottomleft", col = c("darkgreen","gold2", "chocolate1", "red4")  )
# muestras solo outliers
vcf_con <- gl.read.vcf("set_casi_atipico.recode.vcf")
forest_atipico <- gl.keep.ind(vcf_con , ind_filt$Sample_Name_Plate, recalc = FALSE, mono.rm = FALSE, verbose = 3)
pop(forest_atipico) <- posterior$pop_probable # las categorias de daño son nuestra poblacion
paj_con<-xvalDapc(tab(forest_atipico ,NA.method="mean"), pop(forest_atipico))
plotdapc <- scatter(paj_con$DAPC, mstree = T, clabel = T, lwd = 2, grid=T, cex=3,
cleg = 0.80, posi.da = "bottomleft", col = c("darkgreen","gold2", "chocolate1", "red4")  )
# cargamos los datos de las categorias de daño
paj_sin<-xvalDapc(tab(forest_nuetral,NA.method="mean"), pop(forest_nuetral))
plotdapc <- scatter(paj_sin$DAPC, mstree = T, clabel = T, lwd = 2, grid=T, cex=3,
cleg = 0.80, posi.da = "bottomleft", col = c("darkgreen","gold2", "chocolate1", "red4")  )
paj_con<-xvalDapc(tab(forest_atipico ,NA.method="mean"), pop(forest_atipico))
plotdapc <- scatter(paj_con$DAPC, mstree = T, clabel = T, lwd = 2, grid=T, cex=3,
cleg = 0.80, posi.da = "bottomleft", col = c("darkgreen","gold2", "chocolate1", "red4")  )
########## estructura sin outliers #####
# muestras sin outliers
vcf_sin <- gl.read.vcf("set_casi_neutral.recode.vcf")
# volvemos a cortar el vcf
forest_nuetral <- gl.keep.ind(vcf_sin, ind_filt$Sample_Name_Plate, recalc = FALSE, mono.rm = FALSE, verbose = 3)
pop(forest_nuetral) <- posterior$pop_probable # las categorias de daño son nuestra poblacion
# cargamos los datos de las categorias de daño
paj_sin<-xvalDapc(tab(forest_nuetral,NA.method="mean"), pop(forest_nuetral))
plotdapc <- scatter(paj_sin$DAPC, mstree = T, clabel = T, lwd = 2, grid=T, cex=3,
cleg = 0.80, posi.da = "bottomleft", col = c("darkgreen","gold2", "chocolate1", "red4")  )
# cargamos los datos de las categorias de daño
paj_sin<-xvalDapc(tab(forest_nuetral,NA.method="mean"), pop(forest_nuetral))
plotdapc <- scatter(paj_sin$DAPC, mstree = T, clabel = T, lwd = 2, grid=T, cex=3,
cleg = 0.80, posi.da = "bottomleft", col = c("darkgreen","gold2", "chocolate1", "red4")  )
forest@ind.names
# cargamos los datos de las categorias de daño
paj_sin<-xvalDapc(tab(forest_nuetral,NA.method="mean"), pop(forest_nuetral))
plotdapc <- scatter(paj_sin$DAPC, mstree = T, clabel = T, lwd = 2, grid=T, cex=3,
cleg = 0.80, posi.da = "bottomleft", col = c("darkgreen","gold2", "chocolate1", "red4")  )
# muestras solo outliers
vcf_con <- gl.read.vcf("set_casi_atipico.recode.vcf")
forest_atipico <- gl.keep.ind(vcf_con , ind_filt$Sample_Name_Plate, recalc = FALSE, mono.rm = FALSE, verbose = 3)
pop(forest_atipico) <- posterior$pop_probable # las categorias de daño son nuestra poblacion
paj_con<-xvalDapc(tab(forest_atipico ,NA.method="mean"), pop(forest_atipico))
plotdapc <- scatter(paj_con$DAPC, mstree = T, clabel = T, lwd = 2, grid=T, cex=3,
cleg = 0.80, posi.da = "bottomleft", col = c("darkgreen","gold2", "chocolate1", "red4")  )
ind_filt$Sample_Name_Plate
# cargamos el vcf y solo nos quedamos con los individuos del bosque y
# solo excluimos a los individuos repetidos
vcfR_paisaje <- gl.read.vcf("GBS_data.recode.vcf")
# usaremos forest para separar a los individuos del bosque ya que son los que tienen una categoria de daño
meta_gbs %>% count(Treatment)
f <- c("forest")
bosque_ind <- meta_gbs[meta_gbs$Treatment %in% f, ]
forest <- gl.keep.ind(vcfR_paisaje, bosque_ind$Sample_Name_Plate, recalc = FALSE, mono.rm = FALSE, verbose = 3)
# eliminamos los reforestados y las muestras repetidas (NA en estas cuentas)
bosque_ind %>% count(reforested)
nof <- "no"
bosque_ind <- bosque_ind[bosque_ind$reforested %in% nof, ]
bosque_ind %>% count(reforested)
# volvemos a cortar el vcf
forest <- gl.keep.ind(vcfR_paisaje, bosque_ind$Sample_Name_Plate, recalc = FALSE, mono.rm = FALSE, verbose = 3)
# creamos un archivo genepop como lo quiere fsthet
vcfR_paisaje <- read.vcfR("GBS_data.recode.vcf")
geno <- extract.gt(vcfR_paisaje) # obtenemos una matriz que contiene a los genotipos
geno <- t(geno)
# como es el vcf general solo lo filtramos con los individuos del bosque
geno <- geno[rownames(geno) %in% forest@ind.names, ]
G <- matrix(geno, nrow = nrow(geno), ncol = ncol(geno))
# cambiamos el fomato segun el tutorial de fsthet
G[geno %in% c("0/0")] <- "0101"
G[geno  %in% c("0/1")] <- "0102"
G[geno  %in% c("1/0")] <- "0201"
G[geno %in% c("1/1")] <- "0202"
# agregamos el nombre de los loci
colnames(G) <- vcfR_paisaje@fix[,3]
# agregamos el nombre de los individuos y el porcentaje de daño por ozono
pop.info <- posterior$pop_probable
ind.names <- bosque_ind$Sample_Name_Plate
G <- cbind(pop.info, ind.names, G)
View(G)
# calculamos los Fst y Ht para los loci (Flanagan & Jones, (2017)
fsts<-calc.actual.fst(G,"fst")
head(fsts)
par(mar=c(4,4,1,1))
plot(fsts$Ht, fsts$Fst,xlab="Ht",ylab="Fst",pch=19)
# estimamos los outlayers, creamos un grafico y los guardamos en txt
quant.out<-fst.boot(G, bootstrap = T)
outliers<-find.outliers(fsts,boot.out=quant.out)
snps_outliers <- as.vector(outliers$Locus)
write.table(snps_outliers, "outliers_pop_daño.txt",  sep = "\t", row.names = FALSE, col.names = FALSE, quote = FALSE)
head(outliers)
out.dat<-fsthet(G)
head(out.dat)
# esta seria la lista final de outliers, solo tivimos outliers con
# pcadapt y fsthet
pcadap_outlier
snps_outliers
# Encontrar los elementos que están en ambas listas
duplicados <- intersect(pcadap_outlier, snps_outliers)
# Mostrar los duplicados, esto nos dice que las señales son correctas?
print(duplicados)
# Eliminar los duplicados de la lista `pcadap_outlier`
pcadap_outlier <- setdiff(pcadap_outlier, duplicados)
# Unir las dos listas sin duplicados
outliers_combinados <- union(pcadap_outlier, snps_outliers)
# cargamos el vcf y solo nos quedamos con los individuos del bosque y
# solo excluimos a los individuos repetidos
vcfR_paisaje <- gl.read.vcf("GBS_data.recode.vcf")
# usaremos forest para separar a los individuos del bosque ya que son los que tienen una categoria de daño
meta_gbs %>% count(Treatment)
f <- c("forest")
bosque_ind <- meta_gbs[meta_gbs$Treatment %in% f, ]
forest <- gl.keep.ind(vcfR_paisaje, bosque_ind$Sample_Name_Plate, recalc = FALSE, mono.rm = FALSE, verbose = 3)
# eliminamos los reforestados y las muestras repetidas (NA en estas cuentas)
bosque_ind %>% count(reforested)
nof <- "no"
bosque_ind <- bosque_ind[bosque_ind$reforested %in% nof, ]
bosque_ind %>% count(reforested)
# volvemos a cortar el vcf
forest <- gl.keep.ind(vcfR_paisaje, bosque_ind$Sample_Name_Plate, recalc = FALSE, mono.rm = FALSE, verbose = 3)
# creamos un archivo genepop como lo quiere fsthet
vcfR_paisaje <- read.vcfR("GBS_data.recode.vcf")
geno <- extract.gt(vcfR_paisaje) # obtenemos una matriz que contiene a los genotipos
geno <- t(geno)
# como es el vcf general solo lo filtramos con los individuos del bosque
geno <- geno[rownames(geno) %in% forest@ind.names, ]
G <- matrix(geno, nrow = nrow(geno), ncol = ncol(geno))
# cambiamos el fomato segun el tutorial de fsthet
G[geno %in% c("0/0")] <- "0101"
G[geno  %in% c("0/1")] <- "0102"
G[geno  %in% c("1/0")] <- "0201"
G[geno %in% c("1/1")] <- "0202"
# agregamos el nombre de los loci
colnames(G) <- vcfR_paisaje@fix[,3]
# agregamos el nombre de los individuos y el porcentaje de daño por ozono
pop.info <- posterior$pop_probable
ind.names <- bosque_ind$Sample_Name_Plate
G <- cbind(pop.info, ind.names, G)
# calculamos los Fst y Ht para los loci (Flanagan & Jones, (2017)
fsts<-calc.actual.fst(G,"fst")
head(fsts)
par(mar=c(4,4,1,1))
plot(fsts$Ht, fsts$Fst,xlab="Ht",ylab="Fst",pch=19)
# estimamos los outlayers, creamos un grafico y los guardamos en txt
quant.out<-fst.boot(G, bootstrap = T)
outliers<-find.outliers(fsts,boot.out=quant.out)
snps_outliers <- as.vector(outliers$Locus)
write.table(snps_outliers, "outliers_pop_daño.txt",  sep = "\t", row.names = FALSE, col.names = FALSE, quote = FALSE)
head(outliers)
out.dat<-fsthet(G)
head(out.dat)
# esta seria la lista final de outliers, solo tivimos outliers con
# pcadapt y fsthet
pcadap_outlier
snps_outliers
# Encontrar los elementos que están en ambas listas
duplicados <- intersect(pcadap_outlier, snps_outliers)
# Mostrar los duplicados, esto nos dice que las señales son correctas?
print(duplicados)
# Eliminar los duplicados de la lista `pcadap_outlier`
pcadap_outlier <- setdiff(pcadap_outlier, duplicados)
# Unir las dos listas sin duplicados
outliers_combinados <- union(pcadap_outlier, snps_outliers)
# los guardamos para despues eliminarnos del vcf GBS_data, para asi tener nuestro set de loci potencialmente neutrales
write.table(outliers_combinados, "LOCI_ATIPICOS.txt",  sep = "\t", row.names = FALSE, col.names = FALSE, quote = FALSE)
########## estructura sin outliers #####
# muestras sin outliers
vcf_sin <- gl.read.vcf("set_casi_neutral.recode.vcf")
# volvemos a cortar el vcf
forest_nuetral <- gl.keep.ind(vcf_sin, ind_filt$Sample_Name_Plate, recalc = FALSE, mono.rm = FALSE, verbose = 3)
pop(forest_nuetral) <- posterior$pop_probable # las categorias de daño son nuestra poblacion
# cargamos los datos de las categorias de daño
paj_sin<-xvalDapc(tab(forest_nuetral,NA.method="mean"), pop(forest_nuetral))
plotdapc <- scatter(paj_sin$DAPC, mstree = T, clabel = T, lwd = 2, grid=T, cex=3,
cleg = 0.80, posi.da = "bottomleft", col = c("darkgreen","gold2", "chocolate1", "red4")  )
# muestras solo outliers
vcf_con <- gl.read.vcf("set_casi_atipico.recode.vcf")
forest_atipico <- gl.keep.ind(vcf_con , ind_filt$Sample_Name_Plate, recalc = FALSE, mono.rm = FALSE, verbose = 3)
pop(forest_atipico) <- posterior$pop_probable # las categorias de daño son nuestra poblacion
paj_con<-xvalDapc(tab(forest_atipico ,NA.method="mean"), pop(forest_atipico))
plotdapc <- scatter(paj_con$DAPC, mstree = T, clabel = T, lwd = 2, grid=T, cex=3,
cleg = 0.80, posi.da = "bottomleft", col = c("darkgreen","gold2", "chocolate1", "red4")  )
??snpgdsVCF2GDS
