library(ade4)
library(adegenet)
library(vcfR)
##
##### find.cluster #####
read_m3 <-  read.vcfR("m3.snps.vcf")
read_m5 <-  read.vcfR("m5.snps.vcf")
read_m7 <-  read.vcfR("m7.snps.vcf")
library(dartR)
##
##### find.cluster #####
read_m3 <-  gl.read.vcf("m3.snps.vcf")
read_m5 <-  gl.read.vcf("m5.snps.vcf")
read_m7 <-  gl.read.vcf("m7.snps.vcf")
# corremos find.cluster, se escoje un numero maximo de clusters por si existe un efecto placa,
grp3 <- find.clusters(read_m3, max.n.clust = 4, n.pca = 100, choose = FALSE, stat = "BIC", method = "kmeans")
plot(gr3$Kstat, type = "o", xlab = "numero de grupos (K)",
ylab = "BIC",
main = "find.clusters")
# corremos find.cluster, se escoje un numero maximo de clusters por si existe un efecto placa,
grp3 <- find.clusters(read_m3, max.n.clust = 4, n.pca = 20, choose = FALSE, stat = "BIC", method = "kmeans")
read_m3
# corremos find.cluster, se escoje un numero maximo de clusters por si existe un efecto placa,
grp3 <- find.clusters(read_m3, max.n.clust = 4, n.pca = 18, choose = FALSE, stat = "BIC", method = "kmeans")
# corremos find.cluster, se escoje un numero maximo de clusters por si existe un efecto placa,
grp3 <- find.clusters(read_m3, max.n.clust = 4, n.pca = 10, choose = FALSE, stat = "BIC", method = "kmeans")
plot(gr3$Kstat, type = "o", xlab = "numero de grupos (K)",
ylab = "BIC",
main = "find.clusters")
plot(grp3$Kstat, type = "o", xlab = "numero de grupos (K)",
ylab = "BIC",
main = "find.clusters")
dapcm3 <- dapc(read_m3, grp3$grp, n.pca = 10, n.da = 2)
scatter(dapcm3)
grp3$grp
# corremos find.cluster, se escoje un numero maximo de clusters por si existe un efecto placa,
grp3 <- find.clusters(read_m3, max.n.clust = 9, n.pca = 10, choose = FALSE, stat = "BIC", method = "kmeans")
plot(grp3$Kstat, type = "o", xlab = "numero de grupos (K)",
ylab = "BIC",
main = "find.clusters")
grp3$grp
dapcm3 <- dapc(read_m3, grp3$grp, n.pca = 10, n.da = 2)
scatter(dapcm3)
grp5 <- find.clusters(read_m5, max.n.clust = 9, n.pca = 10, choose = FALSE, stat = "BIC", method = "kmeans")
plot(grp5$Kstat, type = "o", xlab = "numero de grupos (K)",
ylab = "BIC",
main = "find.clusters")
grp5$grp
dapcm5 <- dapc(read_m5, grp5$grp, n.pca = 10, n.da = 2)
scatter(dapcm5)
grp7 <- find.clusters(read_m7, max.n.clust = 9, n.pca = 10, choose = FALSE, stat = "BIC", method = "kmeans")
plot(grp7$Kstat, type = "o", xlab = "numero de grupos (K)",
ylab = "BIC",
main = "find.clusters")
grp7$grp
dapcm7 <- dapc(read_m7, grp7$grp, n.pca = 10, n.da = 2)
scatter(dapcm7)
m3_m2 <- gl.read.vcf("m3_M2.snps.vcf")
m5_M2 <- gl.read.vcf("m5_M2.snps.vcf")
grpm3_m2  <- find.clusters(m3_m2 , max.n.clust = 9, n.pca = 10, choose = FALSE, stat = "BIC", method = "kmeans")
plot(grpm3_m2$Kstat, type = "o", xlab = "numero de grupos (K)",
ylab = "BIC",
main = "find.clusters")
grpm3_m2 $grp
dapcm3_m2  <- dapc(m3_m2 , grp3$grp, n.pca = 10, n.da = 2)
scatter(dapcmm3_m2 )
scatter(dapcm3_m2)
grpm5_M2 <- find.clusters(m5_M2, max.n.clust = 9, n.pca = 10, choose = FALSE, stat = "BIC", method = "kmeans")
plot(grpm5_M2$Kstat, type = "o", xlab = "numero de grupos (K)",
ylab = "BIC",
main = "find.clusters")
grpm5_M2$grp
dapcm5_M2 <- dapc(m5_M2, grp3$grp, n.pca = 10, n.da = 2)
grpm3_m2$grp
dapcm3_m2  <- dapc(m3_m2 , grpm2_m2$grp, n.pca = 10, n.da = 2)
dapcm3_m2  <- dapc(m3_m2 , grpm2_m5$grp, n.pca = 10, n.da = 2)
dapcm3_m2  <- dapc(m3_m2 , grpm3_m5$grp, n.pca = 10, n.da = 2)
dapcm3_m2  <- dapc(m3_m2 , grpm3_m2$grp, n.pca = 10, n.da = 2)
scatter(dapcm3_m2)
dapcm5_M2 <- dapc(m5_M2, grpm5_M2$grp, n.pca = 10, n.da = 2)
scatter(dapcm5_M2)
# corremos find.cluster, se escoje un numero maximo de clusters por si existe un efecto placa,
grp3 <- find.clusters(read_m3, max.n.clust = 18, n.pca = 10, choose = FALSE, stat = "BIC", method = "kmeans")
# corremos find.cluster, se escoje un numero maximo de clusters por si existe un efecto placa,
grp3 <- find.clusters(read_m3, max.n.clust = 4, n.pca = 10, choose = FALSE, stat = "BIC", method = "kmeans")
plot(grp3$Kstat, type = "o", xlab = "numero de grupos (K)",
ylab = "BIC",
main = "find.clusters")
grp3$grp
dapcm3 <- dapc(read_m3, grp3$grp, n.pca = 10, n.da = 2)
scatter(dapcm3)
grp5 <- find.clusters(read_m5, max.n.clust = 4, n.pca = 10, choose = FALSE, stat = "BIC", method = "kmeans")
plot(grp5$Kstat, type = "o", xlab = "numero de grupos (K)",
ylab = "BIC",
main = "find.clusters")
grp5$grp
dapcm5 <- dapc(read_m5, grp5$grp, n.pca = 10, n.da = 2)
scatter(dapcm5)
library(ade4)
library(adegenet)
library(vcfR)
library(lattice)
# leemos los archivos vcf que nos devuelve el modulo populations de stacks
# este paso lee los nombres de los archivos vcf
temp <- list.files(pattern="*.vcf")
# leemos los vcf, y a cada elemento de la lista agregamos el nombre antes extraido
vcf.files <- lapply(setNames(temp, make.names(gsub("*.snps.vcf$", "", temp))), read.vcfR)
# leemos los vcf, y a cada elemento de la lista agregamos el nombre antes extraido
vcf.files <- lapply(setNames(temp, make.names(gsub("*.vcf$", "", temp))), read.vcfR)
# convertir los objetos vcf a genlight
genlight.objects <- lapply(vcf.files, vcfR2genlight)
# llamamos las funciones previamene obtenidas de Giles-Perez et al., 2022
source("Distancia_euclideana.r")
source("snp_errorT.r") #Alicia Mastretta-Yanes (https://github.com/AliciaMstt/RAD-error-rates).
source("LociAllele_errorT.r")
# extraemos la tasa de errores de los snps
ErrorRates <- vector(mode = "list", length = length(genlight.objects))
for (i in 1:length(genlight.objects)){
ErrorRates[[i]]<-SNP_error(genlight.objects[[i]], names(genlight.objects)[i])
}
write.table((do.call(rbind, ErrorRates)),"SNPerrorRates.txt", sep ="\t", quote = F, row.names = F)
spn<-read.table("SNPerrorRates.txt", sep ="\t", header = T)
# perform the same for Euclidean distances
EuclDist <- vector(mode = "list", length = length(genlight.objects))
for (i in 1:length(genlight.objects)){
EuclDist[[i]]<-Distancia_euclideana(genlight.objects[[i]], names(genlight.objects)[i])
}
write.table((do.call(rbind, EuclDist)),"EuclDist.txt", sep ="\t", quote = F, row.names = F)
eucli<-read.table("EuclDist.txt", sep ="\t", header = T)
View(spn)
View(eucli)
# and finally for allele error rate
LocAllError <- vector(mode = "list", length = length(genlight.objects))
for (i in 1:length(genlight.objects)){
LocAllError[[i]]<-LociAllele_error(genlight.objects[[i]], names(genlight.objects)[i])
}
write.table((do.call(rbind, LocAllError)),"LocAllError.txt", sep ="\t", quote = F, row.names = F)
allel<-read.table("LocAllError.txt", sep ="\t",header = T)
View(allel)
